"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[75731],{62672:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=a(74848),s=a(28453);const r={},i="Many To Many Relationship",o={id:"packages/sql-graphql/many-to-many",title:"Many To Many Relationship",description:"Many-to-Many relationship lets you relate each row in one table to many rows in",source:"@site/docs/packages/sql-graphql/many-to-many.md",sourceDirName:"packages/sql-graphql",slug:"/packages/sql-graphql/many-to-many",permalink:"/docs/next/packages/sql-graphql/many-to-many",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/platformatic/edit/main/docs/packages/sql-graphql/many-to-many.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Mutations",permalink:"/docs/next/packages/sql-graphql/mutations"},next:{title:"Ignoring types and fields",permalink:"/docs/next/packages/sql-graphql/ignore"}},l={},p=[{value:"Example",id:"example",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"many-to-many-relationship",children:"Many To Many Relationship"}),"\n",(0,t.jsx)(n.p,{children:"Many-to-Many relationship lets you relate each row in one table to many rows in\nanother table and vice versa."}),"\n",(0,t.jsxs)(n.p,{children:['Many-to-many relationship are implemented in SQL via a "join table", a table whose ',(0,t.jsx)(n.strong,{children:"primary key"}),"\nis composed by the identifier of the two parts of the many-to-many relationship."]}),"\n",(0,t.jsx)(n.p,{children:"Platformatic DB fully support many-to-many relationships on all supported databases."}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Consider the following schema (SQLite):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"CREATE TABLE pages (\n  id INTEGER PRIMARY KEY,\n  the_title VARCHAR(42)\n);\n\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE editors (\n  page_id INTEGER NOT NULL,\n  user_id INTEGER NOT NULL,\n  role VARCHAR(255) NOT NULL,\n  CONSTRAINT fk_editor_pages FOREIGN KEY (page_id) REFERENCES pages(id),\n  CONSTRAINT fk_editor_users FOREIGN KEY (user_id) REFERENCES users(id),\n  PRIMARY KEY (page_id, user_id)\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The table ",(0,t.jsx)(n.code,{children:"editors"}),' is a "join table" between users and pages.\nGiven this schema, you could issue queries like:']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"query {\n  editors(orderBy: { field: role, direction: DESC }) {\n    user {\n      id\n      username\n    }\n    page {\n      id\n      theTitle\n    }\n    role\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Mutation works exactly the same as before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  saveEditor(input: { userId: "1", pageId: "1", role: "captain" }) {\n    user {\n      id\n      username\n    }\n    page {\n      id\n      theTitle\n    }\n    role\n  }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);